// Kyle Blackie & Sean Kurian

#include <stdbool.h>
#include <stdlib.h>	

#define PUSHBUTTONS ((volatile long *) 0xFF200050)
#define RLEDs ((volatile long *) 0xFF200000)
	
// Global Variables -------------------------------------
volatile int pixel_buffer_start; 
bool shopKeepFrame1 = true;

// sprite locations
// Prizes are indexed as follows
/*
*	Heart:  0
*	Rupee:  1
*	Bag:    2
*   Shield: 3
*   Yoshi:  4
*/
int x_prize[5] = {102, 102, 232, 232, 164};
int y_prize[5] = {60, 138, 138, 60, 92};
int dx_prize[5] = {0, 1, 0, -1, 0};
int dy_prize[5] = {1, 0, -1, 0, 0};
bool caught[5] = {false, false, false, false, false};
bool claimed[5] = {false, false, false, false, false};

// Bitmaps-----------------------------------------------
// bitmap that stores color hex values for each pixel of heart sprite
short int heart_bitmap[7][7] = {
		{0x0001, 0x0000, 0x0000, 0x0001, 0x0000, 0x0000, 0x0001},
		{0x0000, 0xF300, 0xF300, 0x0000, 0xF300, 0xF300, 0x0000},
		{0x0000, 0xF300, 0xFFB1, 0xF300, 0xFFB1, 0xF300, 0x0000},
		{0x0000, 0xF300, 0xFFB1, 0xFFB1, 0xFFB1, 0xF300, 0x0000},
		{0x0001, 0x0000, 0xF300, 0xFFB1, 0xF300, 0x0000, 0x0001},
		{0x0001, 0x0001, 0x0000, 0xF300, 0x0000, 0x0001, 0x0001},
		{0x0001, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0001}};

// bitmap that stores color hex values for each pixel of rupee sprite
short int rupee_bitmap[14][7] = {
		{0x0001, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0001},
		{0x0001, 0x0001, 0x0000, 0xFFB1, 0x0000, 0x0001, 0x0001},
		{0x0001, 0x0000, 0xFFB1, 0xFFB1, 0xFFB1, 0x0000, 0x0001},
		{0x0000, 0x0000, 0xFFB1, 0xFFB1, 0xFFB1, 0x0000, 0x0000},
		{0x0000, 0xFFB1, 0x0000, 0xFFB1, 0x0000, 0xF300, 0x0000},
		{0x0000, 0xFFB1, 0xFFB1, 0x0000, 0xF300, 0xF300, 0x0000},
		{0x0000, 0xFFB1, 0xFFB1, 0x0000, 0xF300, 0xF300, 0x0000},
		{0x0000, 0xFFB1, 0xFFB1, 0x0000, 0xF300, 0xF300, 0x0000},
		{0x0000, 0xFFB1, 0xFFB1, 0x0000, 0xF300, 0xF300, 0x0000},
		{0x0000, 0xFFB1, 0x0000, 0xF300, 0x0000, 0xF300, 0x0000},
		{0x0000, 0x0000, 0xF300, 0xF300, 0xF300, 0x0000, 0x0000},
		{0x0001, 0x0000, 0xF300, 0xF300, 0xF300, 0x0000, 0x0001},
		{0x0001, 0x0001, 0x0000, 0xF300, 0x0000, 0x0001, 0x0001},
		{0x0001, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0001}};

short int yoshi_bitmap[15][13] = {
	{0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0000, 0x0000, 0x0001, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001},
	{0x0001, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0C80, 0x0000, 0x0000, 0x0001, 0x0001},
	{0x0000, 0x0C80, 0x0C80, 0x0C80, 0x0C80, 0x0C80, 0x0000, 0xFFFF, 0x0C80, 0x0C80, 0x0000, 0x0000, 0x0001},
	{0x0000, 0x0C80, 0x0C80, 0x0C80, 0x0C80, 0x0C80, 0x0C80, 0x0C80, 0x0C80, 0x0C80, 0x0000, 0x0000, 0x0001},
	{0x0000, 0x0C80, 0x0C80, 0x0C80, 0x0C80, 0x0C80, 0x0000, 0xFFFF, 0x0C80, 0x0C80, 0x0000, 0x0001, 0x0001},
	{0x0001, 0x0000, 0x0C80, 0x0C80, 0x0000, 0x0000, 0xFFFF, 0x0C80, 0x0C80, 0x0000, 0x0000, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0C80, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0xFFFF, 0xFFFF, 0x0C80, 0x0000, 0x0000, 0x0000, 0x0C80, 0x0000},
	{0x0001, 0x0001, 0x0001, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0C80, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000},
	{0x0001, 0x0001, 0x0001, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0C80, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000},
	{0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000},
	{0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0001},
	{0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0xFFFF, 0x0C80, 0x0C80, 0x0C80, 0x0000, 0x0000, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001}};

short int link_backview_bitmap[15][12] = {
	{0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0001, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0000, 0x0001, 0x0001},
	{0x0001, 0x0000, 0x0000, 0xFD77, 0x0000, 0x0000, 0x0000, 0x0000, 0xFD77, 0x0000, 0x0000, 0x0001},
	{0x0000, 0xFD77, 0x0000, 0x0000, 0x0A03, 0xFD77, 0xFD77, 0x0A03, 0x0000, 0x0000, 0xFD77, 0x0000},
	{0x0000, 0xFD77, 0x0000, 0x0A03, 0x0A03, 0xFD77, 0xFD77, 0x0A03, 0x0A03, 0x0000, 0xFD77, 0x0000},
	{0x0000, 0xFD77, 0x0000, 0x0A03, 0x0000, 0x0A03, 0xFD77, 0x0A03, 0x0A03, 0x0000, 0xFD77, 0x0000},
	{0x0000, 0x0A03, 0x0000, 0x0000, 0x0A03, 0x0A03, 0xFD77, 0x0A03, 0x0A03, 0x0000, 0x0A03, 0x0000},
	{0x0001, 0x0000, 0x0000, 0x0000, 0x0A03, 0x0A03, 0x0A03, 0x0A03, 0x0000, 0x0000, 0x0000, 0x0001},
	{0x0001, 0x0000, 0x0A03, 0x0000, 0x0A03, 0x0A03, 0x0A03, 0x0000, 0x0A03, 0x0000, 0x0A03, 0x0000},
	{0x0000, 0xFD77, 0x0A03, 0x0000, 0x0A03, 0x0A03, 0x0000, 0x0A03, 0x0A03, 0x0000, 0x0A03, 0x0000},
	{0x0000, 0xFD77, 0x0000, 0x0A03, 0x0000, 0x0000, 0x0A03, 0x0A03, 0xFD77, 0x0A03, 0x0000, 0x0000},
	{0x0001, 0x0000, 0x0A03, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0A03, 0x0A03, 0x0000, 0x0001},
	{0x0001, 0x0000, 0x0000, 0x0A03, 0x0A03, 0x0A03, 0x0A03, 0x0A03, 0x0000, 0x0000, 0x0000, 0x0001},
	{0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFD77, 0xFD77, 0x0000, 0x0000},
	{0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001}};

short int shopkeep1_bitmap[15][15] = {
	{0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0xFD77, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0001, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001},
	{0x0001, 0x0000, 0x0000, 0x0000, 0xFD77, 0x0000, 0x0000, 0x0000, 0xFD77, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
	{0x0001, 0x0000, 0xFD77, 0x0000, 0x0000, 0xFD77, 0xFD77, 0x0000, 0xFD77, 0x0000, 0x0000, 0xFD77, 0xFD77, 0x0000, 0x0000},
	{0x0001, 0x0000, 0xFD77, 0x0000, 0x0000, 0xFD77, 0xFD77, 0x0000, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000},
	{0x0001, 0x0000, 0x0000, 0xFD77, 0x0000, 0xFD77, 0x0000, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000},
	{0x0001, 0x0000, 0xFD77, 0xFD77, 0x0000, 0xFD77, 0xFD77, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0000, 0x0000, 0x0001},
	{0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0001, 0x0001},
	{0x0000, 0x0000, 0x0000, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0xFD77, 0xFD77, 0x0000, 0x3139, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0xFD77, 0xFD77, 0x0000, 0x0000, 0x0000, 0xFD77, 0x0000, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0000, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001}};

short int shopkeep2_bitmap[16][15] = {
	{0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0xFD77, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0001, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001},
	{0x0001, 0x0000, 0x0000, 0x0000, 0xFD77, 0x0000, 0x0000, 0x0000, 0xFD77, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
	{0x0001, 0x0000, 0xFD77, 0x0000, 0x0000, 0xFD77, 0xFD77, 0x0000, 0xFD77, 0x0000, 0x0000, 0xFD77, 0xFD77, 0x0000, 0x0000},
	{0x0001, 0x0000, 0xFD77, 0x0000, 0x0000, 0xFD77, 0xFD77, 0x0000, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000},
	{0x0001, 0x0000, 0x0000, 0xFD77, 0x0000, 0xFD77, 0x0000, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000},
	{0x0001, 0x0000, 0xFD77, 0xFD77, 0x0000, 0xFD77, 0xFD77, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0000, 0x0000, 0x0001},
	{0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0001, 0x0001},
	{0x0000, 0x0000, 0x0000, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFD77, 0xFD77, 0x0000, 0x3139, 0x0000, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x3139, 0x0000, 0xFD77, 0xFD77, 0x0000, 0x3139, 0x0000, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x001,  0x0001, 0x0000, 0x3139, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001}};

short int shield_bitmap[10][8] = {
		{0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000}, 
		{0x0000, 0xABB9, 0x0000, 0x0000, 0x0000, 0x0000, 0xABB9, 0x0000}, 
		{0x0000, 0xABB9, 0xABB9, 0xABB9, 0xABB9, 0xABB9, 0xABB9, 0x0000}, 
		{0x0000, 0xABB9, 0x0000, 0x0000, 0x0000, 0x0000, 0xABB9, 0x0000}, 
		{0x0000, 0xABB9, 0x0000, 0x0000, 0x0000, 0x0000, 0xABB9, 0x0000}, 
		{0x0000, 0xABB9, 0x0000, 0x0000, 0x0000, 0x0000, 0xABB9, 0x0000}, 
		{0x0000, 0xABB9, 0x0000, 0x0000, 0x0000, 0x0000, 0xABB9, 0x0000}, 
		{0x0000, 0xABB9, 0xABB9, 0x0000, 0x0000, 0xABB9, 0xABB9, 0x0000}, 
		{0x0001, 0x0000, 0xABB9, 0xABB9, 0xABB9, 0xABB9, 0x0000, 0x0001}, 
		{0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001}}; 


short int bag_bitmap[14][8] = {
		{0x0000, 0x0000, 0x0001, 0x0000, 0x0000, 0x0001, 0x0000, 0x0000}, 
		{0x0000, 0xE710, 0x0000, 0xE710, 0xE710, 0x0000, 0xE710, 0x0000}, 
		{0x0000, 0xE710, 0x82D1, 0xE710, 0xE710, 0x82D1, 0xE710, 0x0000}, 
		{0x0001, 0x0000, 0xE710, 0xE710, 0x82D1, 0xE710, 0x0000, 0x0001}, 
		{0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001}, 
		{0x0001, 0x0001, 0x0000, 0xE710, 0x82D1, 0x0000, 0x0001, 0x0001}, 
		{0x0001, 0x0000, 0xE710, 0xE710, 0x82D1, 0xE710, 0x0000, 0x0001}, 
		{0x0000, 0xE710, 0xABB9, 0xE710, 0x82D1, 0xE710, 0x82D1, 0x0000},
		{0x0000, 0xE710, 0xABB9, 0xE710, 0xE710, 0xE710, 0x82D1, 0x0000},
		{0x0000, 0xE710, 0xE710, 0xE710, 0xE710, 0xE710, 0x82D1, 0x0000},
		{0x0000, 0xE710, 0xE710, 0xE710, 0xE710, 0xE710, 0x82D1, 0x0000},
		{0x0000, 0x82D1, 0xE710, 0x82D1, 0xE710, 0x82D1, 0x82D1, 0x0000},
		{0x0001, 0x0000, 0x0000, 0x82D1, 0x82D1, 0x0000, 0x0000, 0x0001}, 
		{0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001}}; 

// bitmap that stores colour hex values for each pixel of the clasped claw sprite
short int claw1_bitmap[23][16] = {
		{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000}, 
		{0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0x0000}, 
		{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
		{0x0000,0xDA95,0xDA95,0x0000,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0x0000,0x0000,0xDA95,0xDA95,0x0000}, 
		{0x0000,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0x0000,0xDA95,0xDA95,0x0000,0x0000,0x0000,0x0000,0x0000,0xDA95,0x0000},
		{0x0000,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0x0000,0xDA95,0xDA95,0x0000,0x0000,0x0000,0x0000,0x0000,0xDA95,0x0000},
		{0x0000,0xDA95,0xDA95,0x0000,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0x0000,0x0000,0xDA95,0xDA95,0x0000},
		{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
		{0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001},
		{0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001}, 
		{0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001},
		{0x0001,0x0001,0x0001,0x0001,0x0000,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0x0000,0x0001,0x0001,0x0001,0x0001},
		{0x0001,0x0001,0x0001,0x0000,0xDA95,0x0000,0xDA95,0x0000,0x0000,0xDA95,0x0000,0xDA95,0x0000,0x0001,0x0001,0x0001},
		{0x0001,0x0001,0x0000,0xDA95,0xDA95,0x0000,0xDA95,0x0000,0x0000,0xDA95,0x0000,0xDA95,0xDA95,0x0000,0x0001,0x0001}, 
		{0x0001,0x0000,0xDA95,0xDA95,0x0000,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0x0000,0xDA95,0xDA95,0x0000,0x0001}, 
		{0x0000,0xDA95,0xDA95,0x0000,0xDA95,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xDA95,0x0000,0xDA95,0xDA95,0x0000}, 
		{0x0000,0xDA95,0x0000,0xDA95,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0xDA95,0x0000,0xDA95,0x0000}, 
		{0x0000,0x0000,0xDA95,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0xDA95,0x0000,0x0000},
		{0x0000,0xDA95,0x0000,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0x0000,0xDA95,0x0000},
		{0x0001,0x0000,0xDA95,0x0000,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0x0000,0xDA95,0x0000,0x0001}, 
		{0x0001,0x0001,0x0000,0xDA95,0x0000,0x0000,0x0001,0x0001,0x0001,0x0001,0x0000,0x0000,0xDA95,0x0000,0x0001,0x0001}, 
		{0x0001,0x0001,0x0001,0x0000,0xDA95,0x0000,0x0001,0x0001,0x0001,0x0001,0x0000,0xDA95,0x0000,0x0001,0x0001,0x0001}, 
		{0x0001,0x0001,0x0001,0x0001,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0x0001,0x0001,0x0001,0x0001}};

// bitmap that stores colour hex values for each pixel of the open claw sprite
short int claw2_bitmap[21][16] = {
		{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000}, 
		{0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0x0000}, 
		{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
		{0x0000,0xDA95,0xDA95,0x0000,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0x0000,0x0000,0xDA95,0xDA95,0x0000}, 
		{0x0000,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0x0000,0xDA95,0xDA95,0x0000,0x0000,0x0000,0x0000,0x0000,0xDA95,0x0000},
		{0x0000,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0x0000,0xDA95,0xDA95,0x0000,0x0000,0x0000,0x0000,0x0000,0xDA95,0x0000},
		{0x0000,0xDA95,0xDA95,0x0000,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0x0000,0x0000,0xDA95,0xDA95,0x0000},
		{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
		{0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001},
		{0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001}, 
		{0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001},
		{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
		{0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0xDA95,0x0000,0x0000,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000},
		{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xDA95,0x0000,0x0000,0xDA95,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
		{0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000},
		{0x0000,0xDA95,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xDA95,0x0000}, 
		{0x0000,0xDA95,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0xDA95,0x0000},
		{0x0000,0xDA95,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0xDA95,0x0000},
		{0x0000,0xDA95,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0xDA95,0x0000},
		{0x0000,0xDA95,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0xDA95,0x0000},
		{0x0000,0x0000,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0x0000,0x0000}};

// bitmap that stores colour hex values for each pixel of the slightly extended open claw sprite
short int claw3_bitmap[22][16] = {
		{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000}, 
		{0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0xDA95,0x0000}, 
		{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
		{0x0000,0xDA95,0xDA95,0x0000,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0x0000,0x0000,0xDA95,0xDA95,0x0000}, 
		{0x0000,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0x0000,0xDA95,0xDA95,0x0000,0x0000,0x0000,0x0000,0x0000,0xDA95,0x0000},
		{0x0000,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0x0000,0xDA95,0xDA95,0x0000,0x0000,0x0000,0x0000,0x0000,0xDA95,0x0000},
		{0x0000,0xDA95,0xDA95,0x0000,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0x0000,0x0000,0xDA95,0xDA95,0x0000},
		{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
		{0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001},
		{0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0x0008,0x0008,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001},
		{0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001}, 
		{0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001},
		{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
		{0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0xDA95,0x0000,0x0000,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000},
		{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xDA95,0x0000,0x0000,0xDA95,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
		{0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000,0xDA95,0xDA95,0xDA95,0xDA95,0x0000},
		{0x0000,0xDA95,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xDA95,0x0000}, 
		{0x0000,0xDA95,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0xDA95,0x0000},
		{0x0000,0xDA95,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0xDA95,0x0000},
		{0x0000,0xDA95,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0xDA95,0x0000},
		{0x0000,0xDA95,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0xDA95,0x0000},
		{0x0000,0x0000,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0x0000,0x0000}};	

short int button_off_bitmap[6][6] = {
	{0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001},
	{0x0000, 0x0A03, 0xFD77, 0xFD77, 0x0A03, 0x0000},
	{0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000},
	{0x0000, 0xFD77, 0xFD77, 0xFD77, 0xFD77, 0x0000},
	{0x0000, 0x0A03, 0xFD77, 0xFD77, 0x0A03, 0x0000},
	{0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001}};	

short int button_on_bitmap[6][6] = {
	{0x0001, 0xFFB1, 0xFFB1, 0xFFB1, 0xFFB1, 0x0001},
	{0xFFB1, 0xF300, 0x0000, 0x0000, 0xF300, 0xFFB1},
	{0xFFB1, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFB1},
	{0xFFB1, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFB1},
	{0xFFB1, 0xF300, 0x0000, 0x0000, 0xF300, 0xFFB1},
	{0x0001, 0xFFB1, 0xFFB1, 0xFFB1, 0xFFB1, 0x0001}};	

short int arrow_right[6][6] = {
	{0x0001,0x0001,0x0001,0x0000,0x0001,0x0001}, 
	{0x0000,0x0000,0x0000,0x0000,0x0000,0x0001}, 
	{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000}, 
	{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000}, 
	{0x0000,0x0000,0x0000,0x0000,0x0000,0x0001}, 
	{0x0001,0x0001,0x0001,0x0000,0x0001,0x0001}};

short int arrow_down[6][6] = {
	{0x0001,0x0000,0x0000,0x0000,0x0000,0x0001}, 
	{0x0001,0x0000,0x0000,0x0000,0x0000,0x0001}, 
	{0x0001,0x0000,0x0000,0x0000,0x0000,0x0001}, 
	{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000}, 
	{0x0001,0x0000,0x0000,0x0000,0x0000,0x0001}, 
	{0x0001,0x0001,0x0000,0x0000,0x0001,0x0001}};

short int letter_b[7][6] = {
	{0x0000,0x0000,0x0000,0x0000,0x0001,0x0001}, 
	{0x0000,0x0000,0x0001,0x0000,0x0000,0x0001},  
	{0x0000,0x0000,0x0001,0x0000,0x0000,0x0001}, 
	{0x0000,0x0000,0x0000,0x0000,0x0000,0x0001}, 	
	{0x0000,0x0000,0x0001,0x0001,0x0000,0x0000},
	{0x0000,0x0000,0x0001,0x0001,0x0000,0x0000},
	{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000}};

short int letter_a[7][6] = {
	{0x0001,0x0000,0x0000,0x0000,0x0000,0x0001}, 
	{0x0000,0x0000,0x0001,0x0001,0x0000,0x0000},
	{0x0000,0x0000,0x0001,0x0001,0x0000,0x0000}, 
	{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
	{0x0000,0x0000,0x0001,0x0001,0x0000,0x0000},	
	{0x0000,0x0000,0x0001,0x0001,0x0000,0x0000}, 	
	{0x0000,0x0000,0x0001,0x0001,0x0000,0x0000}}; 

short int you_won[5][26] = {
	{0x0000, 0x0001, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0000, 0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001},
	{0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0000, 0x0001, 0x0000, 0x0001, 0x0001, 0x0000, 0x0001, 0x0000, 0x0001, 0x0000, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000},
	{0x0001, 0x0001, 0x0000, 0x0001, 0x0000, 0x0001, 0x0000, 0x0001, 0x0000, 0x0001, 0x0000, 0x0001, 0x0001, 0x0000, 0x0001, 0x0000, 0x0001, 0x0000, 0x0001, 0x0000, 0x0001, 0x0000, 0x0001, 0x0000, 0x0001, 0x0000},
	{0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0000, 0x0000, 0x0001, 0x0000, 0x0000, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0000, 0x0001, 0x0000}};

int main(void)
{
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
	
	
	// Initialize sprite positions and directions ---------------------------------
	
    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = 0xC8000000; // first store the address in the 
                                        // back buffer
    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
    clear_screen(); // pixel_buffer_start points to the pixel buffer
	erase_box(0,0, 320, 180); // draw background
	//erase_box(0, 160, 320, 80); 
    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
	clear_screen();
	erase_box(0,0, 320, 180); // draw background
	//erase_box(0, 180, 450, 80); 

	//Claw starting position
	int xStart = 16; 
	int yStart = 10; 
   
	//Offset from starting position for claw
	int x = 0; 
	int y = 0; 
	long PBval;
	int wasHor = 0; 
	int wasVert = 0; 
	int reset = 0; 
	int wait1 = 0;
	int wait2 = 0;
	
	int prizeCaught = -1;
	
	int youWonDelay = 0;
	int youWonAnimationSpeed = 0;
	bool youWonDisplay = false;
	
	while (1)
    {
		// Erase the sprites drawn in the previous iteration ------------------------
		erase_box(102, 57, 150, 110);
		erase_box(180, 195, 55, 20);
		erase_box(xStart+x-2, yStart+y-2, 40, 70);
		
		// Draw sprites for current iteration ---------------------------------------
		draw_arrow_right(66, 145); 
		draw_arrow_down(82, 145); 
		draw_letter_a(82, 128); 
		draw_letter_b(66, 128); 
		
		PBval = *PUSHBUTTONS;	
		
		if (PBval == 1 && wasHor == 0) {
			if(x < 220) {
				x+=2;
			}
			draw_button_on(66, 160);
		} else {
			draw_button_off(66, 160);
		}
		if (PBval == 2 && wasVert == 0){
			if( y < 100) {
				y += 2; 
			}
			draw_button_on(82, 160);
		} else {
			draw_button_off(82, 160);
		}
		
		if (wasHor == 1 && wasVert == 1 && reset == 0){
			wait1++;
			// use two delays to make control claw animation
			if (wait1 > 25) {
				wait2++;
				if (wait2 > 35) {
					reset = 1;
				} else {
					draw_claw1(xStart+x, yStart+y);
					if (wait2 == 1) {
						// check if a prize was caught in claw
						prizeCaught = -1;
						for (int i = 0; i < 5; i++) {
							// if not a claimed prize
							if(!claimed[i]) {
								// if in range of claw
								if (((xStart+x) - x_prize[i]) < 0 &&
									((xStart+x) - x_prize[i]) > -25 &&
									((yStart+y+20) - y_prize[i]) < 0 && 
									((yStart+y+20) - y_prize[i]) > -25) {
									
									caught[i] = true;
									x_prize[i] = xStart+x+9;
									y_prize[i] = yStart+y+36;
									
									prizeCaught = i;
									break;
								}
							}
						}
					}
				}
			} else {
				draw_claw2(xStart+x, yStart+y);
			}
			
			//reset = 1; //Testing purposes, whenever you want claw to go back to original position, set reset = 1
			//*Note, if you move the claw for the ending animation or whatever, add that amount of x and y blocks 
			//to x and y variables	
		} else if (reset == 1 && y > 0){
			draw_claw1(xStart+x, yStart+y); 
			if (prizeCaught != -1) {
				y_prize[prizeCaught] -= 2;
			}
			y-=2; 
		} else if (reset == 1 && y == 0 && x > 0){
			draw_claw1(xStart+x, yStart+y); 
			if (prizeCaught != -1) {
				x_prize[prizeCaught] -= 2;
			}			
			x-=2; 
		} else if( reset == 1 && y == 0 && x == 0 ) {
			wait1 = 0;
			wait2 = 0;
			
			if (prizeCaught != -1) {
				// Show you won flashing beside shop keep
				youWonDelay++;
				youWonAnimationSpeed++;
				if(youWonDelay > 50) {
					// reset values
					youWonDelay = 0;
					reset = 0;
					wasHor = 0;
					wasVert = 0;
					youWonAnimationSpeed = 0;
					caught[prizeCaught] = false;
					claimed[prizeCaught] = true;
					erase_box(180, 195, 55, 20);
				} else if(youWonDisplay) {
					draw_you_won_text(180, 195);
				}
			} else {
				// reset values
				youWonDelay = 0;
				reset = 0;
				wasHor = 0;
				wasVert = 0;
				youWonAnimationSpeed = 0;
				caught[prizeCaught] = false;
				claimed[prizeCaught] = true;
			}
			
			if(youWonAnimationSpeed % 3 == 0) {
				youWonDisplay = !youWonDisplay;	
			}
			draw_claw2(xStart, yStart);
			
		} else {
			draw_claw2(xStart+x, yStart+y);
		}
		
		// draw prizes
		if(!claimed[0]) draw_heart(x_prize[0], y_prize[0]);
		if(!claimed[1]) draw_rupee(x_prize[1], y_prize[1]);
		if(!claimed[2]) draw_bag(x_prize[2], y_prize[2]);
		if(!claimed[3]) draw_shield(x_prize[3], y_prize[3]); 
		if(!claimed[4]) draw_yoshi_doll(x_prize[4], y_prize[4]);
		
		
		draw_link_back(66, 182);
		draw_shopkeep();
        
		// Update location of sprites for current iteration ------------------------
		update_sprite_locations();
		
		// Display the state of the buttons on red LEDs
      	*RLEDs = PBval;
		//printf("%d", PBval); 
		
		wait_for_vsync(); // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    	if (x>0 && PBval != 1) wasHor = 1; 
		if (y>0 && PBval != 2) wasVert = 1; 
	}
}

void update_sprite_locations(){
	
	// update locations and directions depending on bounds for each sprite
	for (int i = 0; i < 5; i++) {
		if(!caught[i] && !claimed[i]) {
			checkBounds(i);
			// update locations
			x_prize[i] += dx_prize[i];
			y_prize[i] += dy_prize[i];
		}
	}
}

void checkBounds(int i) {
	
	if(x_prize[i] == 102) {
		if(y_prize[i] == 138) {
			dx_prize[i] = 1;
			dy_prize[i] = 0; 
		} else if(y_prize[i] == 60) {
			dx_prize[i] = 0;
			dy_prize[i] = 1;
		}
	} else if(x_prize[i] == 232) {
		if(y_prize[i] == 138) {
			dx_prize[i] = 0;
			dy_prize[i] = -1; 
		} else if(y_prize[i] == 60) {
			dx_prize[i] = -1;
			dy_prize[i] = 0;
		}
	}
}

void close_claw(int x, int y)
{
	draw_claw2(x, y); 
	erase_box(102, 57, 150, 110);
	erase_box(x, y, 34, 43);
	draw_claw3(x,y); 
	erase_box(102, 57, 150, 110);
	erase_box(x, y, 34, 43);	
	draw_claw1(x,y); 
}

void draw_arrow_right(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 6; i++) {
		for (int j = 0; j < 6; j++) {
			
			int short color = arrow_right[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}

void draw_you_won_text(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 26; i++) {
		for (int j = 0; j < 5; j++) {
			
			int short color = you_won[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}

void draw_letter_b(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 6; i++) {
		for (int j = 0; j < 7; j++) {
			
			int short color = letter_b[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}

void draw_letter_a(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 6; i++) {
		for (int j = 0; j < 7; j++) {
			
			int short color = letter_a[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}

void draw_arrow_down(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 6; i++) {
		for (int j = 0; j < 6; j++) {
			
			int short color = arrow_down[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}

void draw_button_on(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 6; i++) {
		for (int j = 0; j < 6; j++) {
			
			int short color = button_on_bitmap[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}

void draw_button_off(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 6; i++) {
		for (int j = 0; j < 6; j++) {
			
			int short color = button_off_bitmap[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}

void draw_claw1(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 23; j++) {
			
			int short color = claw1_bitmap[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}
	
void draw_claw2(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 21; j++) {
			
			int short color = claw2_bitmap[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}

void draw_claw3(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 22; j++) {
			
			int short color = claw3_bitmap[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}


void draw_shopkeep()
{
		// Erase previous shopkeep	
		erase_box(258, 190, 16, 16);
		shopKeepFrame1 = !shopKeepFrame1;
	
		// draw frame accordingly
		if(shopKeepFrame1) {
			draw_shopkeep1(258,192);
		} else {
			draw_shopkeep2(258,190);
		}
	
}

// Erase by drawing a box of size sx, sy
void erase_box(int x, int y, int sx, int sy) {
	short int colour;
	if(y < 160) {
		colour = 0xE710;
	} else {
		colour = 0xFFFF;
	}
	
	for(int i = 0; i < sx; i+=2) {
		for (int j = 0; j < sy; j+=2) {
			plot_box(x+i, y+j, colour);
		}
	}
}

void draw_bag(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 14; j++) {
			
			int short color = bag_bitmap[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}

void draw_shield(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 10; j++) {
			
			int short color = shield_bitmap[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}

// call this function to draw the shop keep in his second animation frame at location x,y
void draw_shopkeep2(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 16; j++) {
			
			int short color = shopkeep2_bitmap[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}

// call this function to draw the shop keep in his first animation frame at location x,y
void draw_shopkeep1(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++) {
			
			int short color = shopkeep1_bitmap[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}


// call this function to draw link from behind at location x,y
void draw_link_back(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 12; i++) {
		for (int j = 0; j < 15; j++) {
			
			int short color = link_backview_bitmap[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}

// call this function to draw the yoshi doll at location x,y
void draw_yoshi_doll(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 13; i++) {
		for (int j = 0; j < 15; j++) {
			
			int short color = yoshi_bitmap[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}

// call this function to draw the rupee at location x,y
void draw_rupee(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 7; i++) {
		for (int j = 0; j < 14; j++) {
			
			int short color = rupee_bitmap[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}


// call this function to draw the heart piece at location x,y 
/*
 * When drawing sprites we use 0x0001 to represent an empty or blank pixel
*/
void draw_heart(int x, int y) 
{
	// plot pixels using bitmap
	for (int i = 0; i < 7; i++) {
		for (int j = 0; j < 7; j++) {
			
			int short color = heart_bitmap[j][i];
			
			// check for blank pixel
			if(color != 0x0001) {
				// double scale of bitmap by multiplying by 2 to i and j
				plot_box(x+i*2, y+j*2, color);
			}
		}
	}
}

void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void plot_box(int x, int y, short int color)
{
	plot_pixel(x,y,color);
	plot_pixel(x+1,y,color);
	plot_pixel(x,y+1,color);
	plot_pixel(x+1,y+1,color);
}

void wait_for_vsync() 
{
	volatile int* pixel_ctrl_ptr = 0xFF203020;
	register int status;
	
	// write a one into the buffer register to synchronize with the VGA controller
	*pixel_ctrl_ptr = 1;
	
	status = *(pixel_ctrl_ptr + 3);
	while((status & 0x01) != 0) {
		status = *(pixel_ctrl_ptr + 3);
	}
	
}

void draw_line(int x0, int y0, int x1, int y1, short color)
{
	// Implement Pseudo Code From Lab Notes ...
	
	bool is_steep = abs(y1-y0) > abs(x1-x0);
	
	int temp;
	
	if(is_steep) {
		//swap(x0, y0);
		temp = x0;
		x0 = y0;
		y0 = temp;
		
		//swap(x1, y1);
		temp = x1;
		x1 = y1;
		y1 = temp;
	}
	
	if(x0 > x1) {
		//swap(x0,x1);
		temp = x0;
		x0 = x1;
		x1 = temp;
		
		//swap(y0,y1);
		temp = y0;
		y0 = y1;
		y1 = temp;
	}
	
	int deltax = x1 - x0;
	int deltay = abs(y1 - y0);
	int error = -(deltax / 2);
	int y = y0;
	
	int y_step;
	if (y0 < y1) {
		y_step = 1;
	} else {
		y_step = -1;
	}
	
	if (x0 < x1) {
	
		for (int x = x0; x < x1; ++x) {
			
			if (is_steep) {
				plot_pixel(y,x, color);
			} else {
				plot_pixel(x,y, color);
			}
			
			error = error + deltay;
			
			if (error >= 0) {
				y = y + y_step;
				error = error - deltax;
			}
		}
	
	} else {
		for (int x = x0; x > x1; --x) {
			
			if (is_steep) {
				plot_pixel(y,x, color);
			} else {
				plot_pixel(x,y, color);
			}
			
			error = error + deltay;
			
			if (error >= 0) {
				y = y + y_step;
				error = error - deltax;
			}
		}
	}
}

// sets all pixels on VGA to black
void clear_screen()
{
	short black = 0xFFFF;
	
	// loop over all pixels and set each to black
	for (int x = 0; x < 320; x++) {
		for (int y = 0; y < 240; y++) {
			plot_pixel(x,y, black);
		}
	}
}

	
